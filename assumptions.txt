Assumptions:
    - words are separated by one or more spaces (' ');
    - we assume that we do not want to have legacy code ( the iteration 1 word validator ), hence we modify the previous implementation;
    - stopwords will be a file within the project which is read from when the application starts;
    - for simplicity we will assume that the stopwords file will not change during execution;
    - we assume that if the user supplies an invalid filename an exception is thrown and the program will not continue;
    - for iteration 4 we assume that the the words can also be spltied by one or more hyphen: "-"
            Humpty Dumpty sat on a wall. Humpty Dumpty had a great fall.
         - Past iteration 5: Words are no longer separated by hyphen "-", but words can contain a hyphen, hence Humpty-Dumpty is considered one word
                             BUT they may not begin or end with hyphen
    - Here we have 9 words and 7 unique words, taking the stopwords into consideration we assume that now words can also end with exactly one "." ( aka end of sentence)
      - we assume that the dot "." is part of the word, hence lam and lam. are different words.
    - For iteration 6 since we assumed that dot "." is part of the word it will contribute to the length of the word hence: fall. is 5 characters long.
    - For iteration 7 we assume the index is the list of all the unique words
    - For iteration 7 we assume that if the argument is not "-index" then it is the name of the text file that can be given as input and the maximum number is 2,
        from which one needs to be "-index"
    - For iteration 8 in case of a word that is present in the stopwords and in the known words that word will not be displayed and will not be counted.